quit
c
finish
finsi
c
cc
c
finish
c
4
c
finish
c
finish
f
finish
quit
exit
quit
c
legal_moves
c
legal_moves
c
cc
c
cc
c
cc
c
quit
c
legal_moves
c
legal_moves
c
legal_moves
c
5
c
quit
selected_piece.get_legal_moves(piece,self)
selected_piece
selected_Piece
n
c
selected_piece.get_legal_moves(piece,self)
n
selected_piece
n
selected_piece
c
selected_piece.get_legal_moves(piece,self)
selected_piece.get_legal_moves(piece,self).empty?
selected_piece.color
n
selected_piece
n
c
quit
n
@board.piece_select_legal?(piece, @current_player.color) 
piece
c
n
current_color
n
@current_player.color
piece
c
piece
c
@current_player.color
piece
quit
@grid[piece[0]][piece[1]].get_legal_moves(piece,self).empty?
n
quit
self
piece
row
current_color
king_location
c
piece
c
cc
c
cc
c
cc
c
cc
c
n
piece_location
n
c
piece_location
c
piece_location
n
piece
next
@grid
c
quit
next
quit
previous
prev
row
n
row
@grid
quit
@grid
row
quit
q
current_available_directions(origin,board)
n
piece.color != current_color
current_color
piece
self.get_location(piece)
n
legal_moves.include?(king_location)
legal_moves
n
legal_moves
n
directions
c
directions
n
c
directions
n
c
self
c
current_color
king_location
self
2
c
board
n
row
board
current_color
king_location
c
n
clear
@grid
current_color
board
king_location
c
quit
c
legal_moves
n
directions
c
directions
origin
quit
c
cc
continue
quit
c
directions
n
quit
@current_player.is_in_check?(current_color,@board)
current_color
@board
@current_player
n
c
n
@board
current_color
n
current_color
n
c
current_color
n
c
piece
c
cc
c
piece
c
cc
c
4
c
directions
n
directions
quit
n
legal_moves
n
piece
nn
n
piece
n
piece
n
piece
n
nn
n
nn
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
piece
n
