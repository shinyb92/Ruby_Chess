quit
king_location
next
king_location
row.index(piece)
current_color
color
piece.color
piece.class
piece
next
piece
next
piece
next
piece
row
next
piece
c
quit
grid[1]
grid[2]
grid
next
white_pawn
next
white_pawn
next
grid
c
cc
c
quit
@grid[8][4]
location[1]
location[0]
@grid[location[0]][location[1]]
@grid[location[0]]
location[1]
location[0]
location
@grid[location[0]][location[1]]
location
c
@grid[location[0]][location[1]]
c
@grid[location[0]][location[1]]
@grid[location[0]][location[1]
c
@grid[location[0]][location[1]
c
@grid[location[0]][location[1]]
@grid[location[0][location[1]]
location
c
location
piece_at
c
quit
legal_moves
next
legal_moves
next
direction
next
legal_moves
next
new_location
next
direction
next
direction
next
legal_moves
next
legal_moves
next
board.piece_at(new_location).nil?
new_location
next
origin[1]
origin[0]
next
direction[1]
direction[0]
y_direction
direction
directions
quit
direction
directions
y_direction
next
y_direction 
next
directions
next
directions
next
self
c
quit
legal_moves
next
c
quit
origin
directions
legal_moves
next
self
c
origin
c
destination
next
legal_moves
next
c
self
c
self
c
self
quit
self
self.first_turn
self.first_move?
c
quit
board.piece_at(origin)
self.first_move?
c
self.first_turn
board.piece_at(origin).first_turn
next
board.piece_at(origin)
next
self.first_move?
next
quit
board.piece_at(origin)
c
board.piece_at(origin)
quit
self
c
self
c
next
self.first_move?
next
self
quit
self.first_move?
next
c
next
quit
next
quit
next
legal_moves
next
directions
next
directions
next
self.can_take_left?(origin, board)
next
first_move?
next
@current_player.color
destination
piece
next
destination_is_possible
next
legal_moves.include?(destination) 
next
legal_moves
next
self.color 
next
first_move?
next
c
quit
board.piece_at(origin).can_take_piece?(origin,board)
board.piece_at(origin)
next
first_move?
c
continue
legal_moves
next
first_move?
next
origin
continue
next
board.piece_at(origin)
origin
quit
clear
board[origin[0]][origin[1]]
quit
new_location
next
legal_moves
next
board.piece_at(new_location).nil?
new_location
next
board.piece_at(new_location).nil?
new_location
next
board.off_board?(new_location)
board.off_board?([-1,0])
new_location[0] < 0
new_location
board.off_board?(new_location).nil?
new_location
next
quit
new_location
next
quit
legal_moves
next
@current_player.color
destination
piece
next
destination_is_possible
next
previous
legal_moves
next
continue
destination
legal_moves
next
board
origin
quit
legal_moves
next
c
quit
clear
self
quit
board[-1]
new_location
